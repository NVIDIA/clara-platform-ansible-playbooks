# Copyright (c) 2020-2021, NVIDIA CORPORATION.  All rights reserved.
#
# NVIDIA CORPORATION and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA CORPORATION is strictly prohibited.

---
- name: Add K8s GPG apt Key
  become: yes
  apt_key:
    url: "{{ kubernetes_gpg_key }}"
    state: present

- name: Add Kubernetes Repository
  become: yes
  apt_repository:
    repo: "{{ kubernetes_repo }}"
    state: present

- name: Update apt and Install kubelet
  become: yes
  apt:
    name: kubelet={{ kubernetes_version }}
    update_cache: yes
    state: present
    force: true
  register: kubelet_install

- name: Hold kubelet at current version
  dpkg_selections:
    name: kubelet
    selection: hold

- name: Update apt and Install kubeadm
  become: yes
  apt:
    name: kubeadm={{ kubernetes_version }}
    update_cache: yes
    force: true
    state: present

- name: Hold kubeadm at current version
  dpkg_selections:
    name: kubeadm
    selection: hold

- name: Update apt and Install kubectl
  become: yes
  apt:
    name: kubectl={{ kubernetes_version }}
    update_cache: yes
    force: true
    state: present

- name: Hold kubectl at current version
  dpkg_selections:
    name: kubectl
    selection: hold

- name: Copy Kubernetes Files to Remote Host
  copy:
    src: "files/{{item}}"
    dest: /tmp
  with_items:
    - kube-flannel-rbac.yml

- name: Add kube-flannel template
  template:
    src: kube-flannel.j2
    dest: /tmp/kube-flannel.yml

- name: Check if Kubernetes is initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: kubernetes_init

- name: Check if Kubernetes has been initiated
  debug:
    msg: "Kube admin exists"
  when: kubernetes_init.stat.exists

- name: Initialize kubeadm
  become: yes
  shell: kubeadm init --pod-network-cidr="{{ pod_network_cidr }}" --apiserver-cert-extra-sans="{{ ansible_default_ipv4.address }}" --log-file=/tmp/kubernetes_init.log
  when: not kubernetes_init.stat.exists

- name: Creates User kube Directory
  file:
    path: "/home/{{ clara_user }}/.kube"
    state: directory

- name: Copy Kubernetes Configuration
  become: yes
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ clara_user }}/.kube/config"
    owner: "{{ clara_user }}"
    group: '{{ ansible_facts["real_group_id"] }}'
    mode: 0600
    remote_src: yes

- name: Remove NoSchedule taint value on Primary Node
  shell: "kubectl taint node {{ ansible_hostname }} node-role.kubernetes.io/master:NoSchedule-"
  environment:
    KUBECONFIG: /home/{{ clara_user }}/.kube/config
  ignore_errors: true
  failed_when: false

- name: Pause for 5 seconds before adding deployments
  pause:
    seconds: 5

- name: Apply Flannel RBAC
  shell: |
    kubectl apply -f /tmp/kube-flannel-rbac.yml
  environment:
    KUBECONFIG: /home/{{ clara_user }}/.kube/config

- name: Apply Flannel
  shell: |
    kubectl apply -f /tmp/kube-flannel.yml
  environment:
    KUBECONFIG: /home/{{ clara_user }}/.kube/config

- name: Restart Kubelet
  become: yes
  service:
    name: kubelet
    daemon_reload: yes
    state: restarted
  when: kubelet_install.changed == True

- name: Download Helm
  get_url:
    url: "https://get.helm.sh/{{ helm_filename }}"
    dest: "/tmp/{{ helm_filename }}"
    checksum: "{{ helm_checksum }}"

- name: Install Helm Executable
  unarchive:
    src: "/tmp/{{ helm_filename }}"
    dest: /tmp
    remote_src: yes

- name: Copy Helm Executable to Path
  become: yes
  copy:
    src: /tmp/linux-amd64/helm
    dest: /usr/local/bin
    remote_src: yes
    owner: "{{ clara_user }}"
    group: "{{ clara_user }}"
    mode: 0755

- name: Add Nvidia Device Plug-in Repository to Helm
  shell: helm repo add nvdp https://nvidia.github.io/k8s-device-plugin
  become_user: '{{ clara_user }}'

- name: Add Nvidia NGC Helm Repository
  shell: helm repo add ngc {{ ngc_helm_repo }}/{{ ngc_org }}/{{ ngc_team }} --username \$oauthtoken --password {{ ngc_api_key }}
  become_user: '{{ clara_user }}'

- name: Update Helm Repository
  shell: helm repo update
  become_user: '{{ clara_user }}'

- name: Install Nvidia Device Plugin
  shell: helm install --version={{ nvidia_device_plugin_version }} nvidia-device-plugin nvdp/nvidia-device-plugin
  become_user: '{{ clara_user }}'

- name: Ensure logrotate directory exist
  become: yes
  file:
    path: /etc/logrotate.d
    state: directory
    mode: 0644

- name: Copy logrotate config for container logs
  become: yes
  copy:
    group: "{{ clara_user }}"
    src: "files/container_logs"
    dest: /etc/logrotate.d/container_logs
    mode: 0755
